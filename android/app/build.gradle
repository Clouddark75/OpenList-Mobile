plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "kotlin-kapt"
    id "dev.flutter.flutter-gradle-plugin"
}

apply plugin: 'kotlinx-serialization'

def pro = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        pro.load(reader)
    }
}

static def releaseTime() {
    return new Date().format("yyMMddHH", TimeZone.getTimeZone("GMT+8"))
}

def openlistVersionFile = rootProject.file("../openlist_version")
def openlistVersion = openlistVersionFile.exists() ? openlistVersionFile.readLines()[0] : "1.0.0"

// 使用OpenList主程序版本号，去掉前缀'v'，然后加上时间戳
def baseVersion = openlistVersion.startsWith('v') ? openlistVersion.substring(1) : openlistVersion
def version = baseVersion + "." + releaseTime()
def gitCommits = Integer.parseInt('git rev-list HEAD --count'.execute().text.trim())

android {
    namespace "com.github.openlistteam.openlistflutter"
    compileSdk = 35
    ndkVersion = "27.0.12077973"

    signingConfigs {
        release {
            if (pro["KEY_PATH"] != null && pro["KEY_PASSWORD"] != null && 
                pro["ALIAS_NAME"] != null && pro["ALIAS_PASSWORD"] != null) {
                storeFile file(pro["KEY_PATH"])
                storePassword pro["KEY_PASSWORD"]
                keyAlias pro["ALIAS_NAME"]
                keyPassword pro["ALIAS_PASSWORD"]
            }
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.github.openlistteam.openlistflutter"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk 21
        targetSdk flutter.targetSdkVersion
        versionCode gitCommits
        versionName version

        
        buildConfigField("String", "OPENLIST_VERSION", "\"${openlistVersion}\"")
    }


    buildFeatures {
        buildConfig true
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }


    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java.srcDirs = ['src/main/java', 'src/main/kotlin']
        }
    }

    splits {
        abi {
            enable gradle.startParameter.taskNames.any { it.contains("Release") }
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            universalApk true
        }
    }

//    kotlin {
//        jvmToolchain  = 17
//    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            if (pro["KEY_PATH"] != null && pro["KEY_PASSWORD"] != null && 
                pro["ALIAS_NAME"] != null && pro["ALIAS_PASSWORD"] != null) {
                signingConfig signingConfigs.release
            }
        }

        debug {
            ndk {
                //noinspection ChromeOsAbiSupport
//                abiFilters "arm64-v8a"
//                abiFilters "x86"
            }
        }
    }
}

androidComponents {
    onVariants(selector().all()) { variant ->
        variant.outputs.forEach { output ->
            def versionName = output.versionName.orNull ?: "1.0.0"
            output.outputFileName.set("OpenListF-v${versionName}.apk")
        }
    }
}


flutter {
    source '../..'
}
////获取flutter的sdk路径
//def flutterRoot = localProperties.getProperty('flutter.sdk')
//if (flutterRoot == null) {
//    throw new Exception("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
//}
dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')

//    compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")
    implementation project(":utils")
    //noinspection GradleDependency
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'

    implementation 'com.louiscad.splitties:splitties-systemservices:3.0.0'

    implementation 'com.github.cioccarellia:ksprefs:2.4.0'

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")

    // Core library desugaring for flutter_local_notifications
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    // Room
//    implementation("androidx.room:room-runtime:$room_version")
//    implementation("androidx.room:room-ktx:$room_version")
//    ksp("androidx.room:room-compiler:$room_version")
//    androidTestImplementation("androidx.room:room-testing:$room_version")


}